import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';

// Simple MLP implementation
class NeuralNetwork {
  constructor() {
    this.weights1 = new Array(784).fill(0).map(() => new Array(128).fill(0).map(() => Math.random() * 2 - 1));
    this.weights2 = new Array(128).fill(0).map(() => new Array(10).fill(0).map(() => Math.random() * 2 - 1));
    this.bias1 = new Array(128).fill(0);
    this.bias2 = new Array(10).fill(0);
  }

  sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
  }

  forward(input) {
    // First layer
    const hidden = new Array(128).fill(0);
    for (let i = 0; i < 128; i++) {
      let sum = this.bias1[i];
      for (let j = 0; j < 784; j++) {
        sum += input[j] * this.weights1[j][i];
      }
      hidden[i] = this.sigmoid(sum);
    }

    // Output layer
    const output = new Array(10).fill(0);
    for (let i = 0; i < 10; i++) {
      let sum = this.bias2[i];
      for (let j = 0; j < 128; j++) {
        sum += hidden[j] * this.weights2[j][i];
      }
      output[i] = this.sigmoid(sum);
    }

    return output;
  }

  train(input, target, learningRate = 0.1) {
    // Forward pass
    const hidden = new Array(128).fill(0);
    for (let i = 0; i < 128; i++) {
      let sum = this.bias1[i];
      for (let j = 0; j < 784; j++) {
        sum += input[j] * this.weights1[j][i];
      }
      hidden[i] = this.sigmoid(sum);
    }

    const output = new Array(10).fill(0);
    for (let i = 0; i < 10; i++) {
      let sum = this.bias2[i];
      for (let j = 0; j < 128; j++) {
        sum += hidden[j] * this.weights2[j][i];
      }
      output[i] = this.sigmoid(sum);
    }

    // Backward pass
    const deltaOutput = output.map((o, i) => o - target[i]);
    const deltaHidden = new Array(128).fill(0);
    
    for (let i = 0; i < 128; i++) {
      for (let j = 0; j < 10; j++) {
        deltaHidden[i] += deltaOutput[j] * this.weights2[i][j];
      }
      deltaHidden[i] *= hidden[i] * (1 - hidden[i]);
    }

    // Update weights and biases
    for (let i = 0; i < 784; i++) {
      for (let j = 0; j < 128; j++) {
        this.weights1[i][j] -= learningRate * input[i] * deltaHidden[j];
      }
    }

    for (let i = 0; i < 128; i++) {
      for (let j = 0; j < 10; j++) {
        this.weights2[i][j] -= learningRate * hidden[i] * deltaOutput[j];
      }
    }

    this.bias1 = this.bias1.map((b, i) => b - learningRate * deltaHidden[i]);
    this.bias2 = this.bias2.map((b, i) => b - learningRate * deltaOutput[i]);
  }
}

const NeuralNet = () => {
  const [model, setModel] = useState(null);
  const [isTraining, setIsTraining] = useState(false);
  const [progress, setProgress] = useState(0);
  const [prediction, setPrediction] = useState(null);
  const canvasRef = useRef(null);
  const [isDrawing, setIsDrawing] = useState(false);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 20;
    ctx.lineCap = 'round';
  }, []);

  const startDrawing = (e) => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    ctx.beginPath();
    ctx.moveTo(x, y);
    setIsDrawing(true);
  };

  const draw = (e) => {
    if (!isDrawing) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    ctx.lineTo(x, y);
    ctx.stroke();
  };

  const stopDrawing = () => {
    setIsDrawing(false);
    if (model) {
      classifyDigit();
    }
  };

  const clearCanvas = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    setPrediction(null);
  };

  const trainModel = async () => {
    setIsTraining(true);
    setProgress(0);
    const nn = new NeuralNetwork();
    setModel(nn);

    // Generate synthetic training data (simplified for demo)
    const trainingData = [];
    for (let i = 0; i < 1000; i++) {
      const digit = Math.floor(Math.random() * 10);
      const input = new Array(784).fill(0).map(() => Math.random() < 0.2 ? 1 : 0);
      const target = new Array(10).fill(0);
      target[digit] = 1;
      trainingData.push({ input, target });
    }

    // Train the model
    for (let epoch = 0; epoch < 10; epoch++) {
      for (let i = 0; i < trainingData.length; i++) {
        const { input, target } = trainingData[i];
        nn.train(input, target);
      }
      setProgress((epoch + 1) * 10);
    }

    setModel(nn);
    setIsTraining(false);
  };

  const classifyDigit = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const input = [];
    
    // Downsample to 28x28 and normalize
    for (let y = 0; y < 28; y++) {
      for (let x = 0; x < 28; x++) {
        let sum = 0;
        const sX = Math.floor(x * (canvas.width / 28));
        const sY = Math.floor(y * (canvas.height / 28));
        
        for (let dy = 0; dy < Math.floor(canvas.height / 28); dy++) {
          for (let dx = 0; dx < Math.floor(canvas.width / 28); dx++) {
            const pixelIndex = ((sY + dy) * canvas.width + (sX + dx)) * 4;
            sum += (255 - imageData.data[pixelIndex]) / 255;
          }
        }
        input.push(sum / (Math.floor(canvas.width / 28) * Math.floor(canvas.height / 28)));
      }
    }

    const output = model.forward(input);
    setPrediction(output.indexOf(Math.max(...output)));
  };

  return (
    <div className="flex flex-col items-center gap-4 p-4">
      <Card className="p-6">
        <h2 className="text-2xl font-bold mb-4">MNIST Digit Classifier</h2>
        
        <div className="flex flex-col gap-4">
          <div className="flex gap-4">
            <Button 
              onClick={trainModel} 
              disabled={isTraining}
              className="w-32"
            >
              {isTraining ? 'Training...' : 'Train Model'}
            </Button>
            
            <Button 
              onClick={clearCanvas}
              className="w-32"
            >
              Clear Canvas
            </Button>
          </div>

          {isTraining && (
            <div className="w-full">
              <Progress value={progress} className="w-full" />
              <p className="text-sm text-gray-500 mt-2">Training Progress: {progress}%</p>
            </div>
          )}

          <canvas
            ref={canvasRef}
            width={280}
            height={280}
            className="border border-gray-300 bg-white cursor-crosshair"
            onMouseDown={startDrawing}
            onMouseMove={draw}
            onMouseUp={stopDrawing}
            onMouseOut={stopDrawing}
          />

          {prediction !== null && (
            <Alert>
              <AlertDescription>
                Predicted Digit: {prediction}
              </AlertDescription>
            </Alert>
          )}

          {!model && !isTraining && (
            <Alert>
              <AlertDescription>
                Please train the model first before drawing digits.
              </AlertDescription>
            </Alert>
          )}
        </div>
      </Card>
    </div>
  );
};

export default NeuralNet;
